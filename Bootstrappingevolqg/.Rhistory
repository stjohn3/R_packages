matrix.1.pop="carb", matrix.2.pop="SSI",
R=10)
boot.ci(test, type="norm")
ssi.rad.df%<>%
mutate(dataframe="SSI.rad")
rbind(carb.df, ssi.rad.df)->for.boot
test<-boot(d=for.boot,
statistic = boot.randomskewer,
measurement = "correlation",
matrix.1.pop="carb", matrix.2.pop="SSI.rad",
R=10)
boot.ci(test, type="norm")
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
#### PRINT mean and confidence intervals for above functions####
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat){
if(which.function==boot.randomskewer){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
else{
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
#### PRINT mean and confidence intervals for above functions####
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat){
if(which.function==as.character(boot.randomskewer)){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
else{
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat){
as.character(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop,matrix.2.pop){
as.character(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
str_conv(which.function)%>%print()
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop,matrix.2.pop){
str_conv(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
as.string(which.function)%>%print()
string(which.function)%>%print()
(which.function)%>%print()
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop,matrix.2.pop){
(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
paste0(which.function)%>%print()
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop,matrix.2.pop){
paste0(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop,matrix.2.pop){
as.character(which.function)%>%print()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop=NULL,matrix.2.pop=NULL){
if(is.null(matrix.1.pop)==TRUE){
print("one data frame")
}
else{print("two data frames")}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop=NULL,matrix.2.pop=NULL){
if(is.null(matrix.1.pop)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "norm")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))  }
else{
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "norm")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat, matrix.1.pop=NULL,matrix.2.pop=NULL){
if(is.null(matrix.1.pop)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))  }
else{
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="probability",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
RandomSkewers(Matrix.1, Matrix.2)%>%
#as.data.frame()%>%
#slice(1)%>%
#as.numeric()%>%
return()
#RandomSkewers
RandomSkewers(carb.cov.matrix,ssi.cov.matrix)
####Test out how to make cov matrices before we boostrap####
carb.cov.matrix <- cov(as.matrix(carb.df[,2:19]))%>%as.matrix()
ssi.cov.matrix <- cov(as.matrix(ssi.df[,2:19]))%>%as.matrix()
ssi.gen.cov.matrix <- cov(as.matrix(ssi.gen.df[,2:19]))%>%as.matrix()
#RandomSkewers
RandomSkewers(carb.cov.matrix,ssi.cov.matrix)
#RandomSkewers
RandomSkewers(carb.cov.matrix,ssi.cov.matrix)%>%as.data.frame()
#RandomSkewers
RandomSkewers(carb.cov.matrix,ssi.cov.matrix)%>%as.data.frame()%>%slice(2)
##########################
#### Work in progress ####
##########################
boot.randomskewer<-function(d, i, measurement, matrix.1.pop, matrix.2.pop){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
nrow()->length.matrix1
#print(length.matrix1)
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
nrow()->length.matrix2
#print(length.matrix2)
if(measurement=="correlation"){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
RandomSkewers(Matrix.1, Matrix.2)%>%
as.data.frame()%>%
slice(1)%>%
as.numeric()%>%
return()
}
else if(measurement=="probability"){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
RandomSkewers(Matrix.1, Matrix.2)%>%
as.data.frame()%>%
slice(2)%>%
as.numeric()%>%
return()
}
else if(measurement=="correlation_sd"){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
RandomSkewers(Matrix.1, Matrix.2)%>%
as.data.frame()%>%
slice(3)%>%
as.numeric()%>%
return()
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="probability",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.randomskewer,
iterations=50,
stat="correlation_sd",
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
## Print function test: ####
mean.and.ci(enter.dataframe = carb.df,
which.function = boot.meanmatrixstats,
iterations=00,
stat="MeanSquaredCorrelation")
## Print function test: ####
mean.and.ci(enter.dataframe = carb.df,
which.function = boot.meanmatrixstats,
iterations=10,
stat="MeanSquaredCorrelation")
PCAsimilarity(carb.cov.matrix,ssi.cov.matrix)
MatrixDistance(carb.cov.matrix,ssi.cov.matrix)
boot.pca.similarity<-function(d, i, matrix.1.pop, matrix.2.pop){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
nrow()->length.matrix1
#print(length.matrix1)
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
nrow()->length.matrix2
#print(length.matrix2)
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
PCAsimilarity(Matrix.1, Matrix.2)%>%
return()
}
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat=NULL, matrix.1.pop=NULL,matrix.2.pop=NULL){
if(is.null(matrix.1.pop)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))  }
else{
if(is.null(stat)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
else{
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
}
boot.pca.similarity<-function(d, i, matrix.1.pop, matrix.2.pop){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
nrow()->length.matrix1
#print(length.matrix1)
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
nrow()->length.matrix2
#print(length.matrix2)
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
PCAsimilarity(Matrix.1, Matrix.2)%>%
return()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.pca.similarity,
iterations=50,
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
mean.and.ci<-function(enter.dataframe, iterations, which.function, stat=NULL, matrix.1.pop=NULL,matrix.2.pop=NULL){
#uses this print for MeanMatrixStatistics
if(is.null(matrix.1.pop)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))  }
else{
#uses this pring for PCAsimilarity and MatrixDistance
if(is.null(stat)==TRUE){
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
else{
#use this print for random skewers
boot.mean<-boot(d=enter.dataframe,
statistic=which.function,
measurement=stat,
R=iterations,
matrix.1.pop=matrix.1.pop,
matrix.2.pop=matrix.2.pop)
boot.ci<-boot.ci(boot.mean,conf = 0.95, type = "basic")
print(paste("mean is:", boot.mean$t0, "confidence intervals are:", boot.ci$basic[,4],boot.ci$basic[,5]))
}
}
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.pca.similarity,
iterations=50,
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
boot.matrix.similarity<-function(d, i, matrix.1.pop, matrix.2.pop){
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
nrow()->length.matrix1
#print(length.matrix1)
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
nrow()->length.matrix2
#print(length.matrix2)
d[i,]%>%
filter(dataframe==matrix.1.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix1)%>%
cov(.)%>%
as.matrix(.)->Matrix.1
d[i,]%>%
filter(dataframe==matrix.2.pop)%>%
dplyr::select(2:19)%>%
slice(1:length.matrix2)%>%
cov(.)%>%
as.matrix(.)->Matrix.2
MatrixDistance(Matrix.1, Matrix.2)%>%
return()
}
mean.and.ci(enter.dataframe = for.boot,
which.function = boot.matrix.similarity,
iterations=50,
matrix.1.pop="carb",
matrix.2.pop="SSI.rad")
devtools::create("EvolqgBootstrapping")
devtools::create("../EvolqgBootstrapping")
getwd()
devtools::create("EvolqgBootstrapping")
devtools::load_all()
getwd()
devtools::install_github("stjohn3/P_Matrix_Study/Bootstrapping_Pmatrix/EvolqgBootstrapping")
devtools::install_github("stjohn3/EvolqgBootstrapping")
devtools::install_github("stjohn3/EvolqgBootstrapping")
devtools::install_github("stjohn3/R_packages",
subdir="EvolqgBootstrapping")
devtools::install_github("stjohn3/R_packages",
subdir="EvolqgBootstrapping")
library(EvolqgBootstrapping)
EvolqgBootstrapping::mean.and.ci()
?mean.and.ci
devtools::install_github("stjohn3/R_packages",
subdir="EvolqgBootstrapping")
devtools::install_github("stjohn3/R_packages",
subdir="EvolqgBootstrapping")
getwd()
setwd("/Users/mickey7210/Desktop/R_packages/EvolqgBootstrapping/")
getwd()
devtools::document()
getwd()
setwd("/Users/mickey7210/Desktop/R_packages/")
devtools::create("Bootstrapping_evolqg")
devtools::create("Bootstrappingevolqg")
devtools::install_github("stjohn3/R_packages",
subdir="Bootstrappingevolqg")
library(Boostrappingevolqg)
Boostrappingevolqg::
?Boostrappingevolqg
??Boostrappingevolqg
Boostrappingevolqg::
?Boostrappingevolqg::boot.matrix.distance
getwd()
setwd("./Bootstrappingevolqg/")
devtools::document()
library(librarian)
shelf(Boostrappingevolqg)
Boostrappingevolqg::
?Boostrappingevolqg::boot.matrix.distance
??Boostrappingevolqg
Boostrappingevolqg::
?Boostrappingevolqg::boot.matrix.distance
#help pages
?Boostrappingevolqg::meanandci()
?Boostrappingevolqg::boot.meanmatrixstats()
?Boostrappingevolqg::boot.randomskewer()
